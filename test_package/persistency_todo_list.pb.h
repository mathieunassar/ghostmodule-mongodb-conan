// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: persistency_todo_list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_persistency_5ftodo_5flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_persistency_5ftodo_5flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_persistency_5ftodo_5flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_persistency_5ftodo_5flist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_persistency_5ftodo_5flist_2eproto;
namespace ghost {
namespace examples {
namespace protobuf {
class Todo;
class TodoDefaultTypeInternal;
extern TodoDefaultTypeInternal _Todo_default_instance_;
}  // namespace protobuf
}  // namespace examples
}  // namespace ghost
PROTOBUF_NAMESPACE_OPEN
template<> ::ghost::examples::protobuf::Todo* Arena::CreateMaybeMessage<::ghost::examples::protobuf::Todo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ghost {
namespace examples {
namespace protobuf {

// ===================================================================

class Todo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ghost.examples.protobuf.Todo) */ {
 public:
  Todo();
  virtual ~Todo();

  Todo(const Todo& from);
  Todo(Todo&& from) noexcept
    : Todo() {
    *this = ::std::move(from);
  }

  inline Todo& operator=(const Todo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Todo& operator=(Todo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Todo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Todo* internal_default_instance() {
    return reinterpret_cast<const Todo*>(
               &_Todo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Todo& a, Todo& b) {
    a.Swap(&b);
  }
  inline void Swap(Todo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Todo* New() const final {
    return CreateMaybeMessage<Todo>(nullptr);
  }

  Todo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Todo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Todo& from);
  void MergeFrom(const Todo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Todo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ghost.examples.protobuf.Todo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_persistency_5ftodo_5flist_2eproto);
    return ::descriptor_table_persistency_5ftodo_5flist_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDateCreatedFieldNumber = 3,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // .google.protobuf.Timestamp date_created = 3;
  bool has_date_created() const;
  void clear_date_created();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date_created() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date_created();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date_created();
  void set_allocated_date_created(PROTOBUF_NAMESPACE_ID::Timestamp* date_created);

  // @@protoc_insertion_point(class_scope:ghost.examples.protobuf.Todo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_created_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_persistency_5ftodo_5flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Todo

// string title = 1;
inline void Todo::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Todo::title() const {
  // @@protoc_insertion_point(field_get:ghost.examples.protobuf.Todo.title)
  return title_.GetNoArena();
}
inline void Todo::set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.examples.protobuf.Todo.title)
}
inline void Todo::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.examples.protobuf.Todo.title)
}
inline void Todo::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.examples.protobuf.Todo.title)
}
inline void Todo::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.examples.protobuf.Todo.title)
}
inline std::string* Todo::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:ghost.examples.protobuf.Todo.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Todo::release_title() {
  // @@protoc_insertion_point(field_release:ghost.examples.protobuf.Todo.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Todo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ghost.examples.protobuf.Todo.title)
}

// string description = 2;
inline void Todo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Todo::description() const {
  // @@protoc_insertion_point(field_get:ghost.examples.protobuf.Todo.description)
  return description_.GetNoArena();
}
inline void Todo::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ghost.examples.protobuf.Todo.description)
}
inline void Todo::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ghost.examples.protobuf.Todo.description)
}
inline void Todo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ghost.examples.protobuf.Todo.description)
}
inline void Todo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ghost.examples.protobuf.Todo.description)
}
inline std::string* Todo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ghost.examples.protobuf.Todo.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Todo::release_description() {
  // @@protoc_insertion_point(field_release:ghost.examples.protobuf.Todo.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Todo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ghost.examples.protobuf.Todo.description)
}

// .google.protobuf.Timestamp date_created = 3;
inline bool Todo::has_date_created() const {
  return this != internal_default_instance() && date_created_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Todo::date_created() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_created_;
  // @@protoc_insertion_point(field_get:ghost.examples.protobuf.Todo.date_created)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Todo::release_date_created() {
  // @@protoc_insertion_point(field_release:ghost.examples.protobuf.Todo.date_created)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_created_;
  date_created_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Todo::mutable_date_created() {
  
  if (date_created_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    date_created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ghost.examples.protobuf.Todo.date_created)
  return date_created_;
}
inline void Todo::set_allocated_date_created(PROTOBUF_NAMESPACE_ID::Timestamp* date_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_created_);
  }
  if (date_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_created)->GetArena();
    if (message_arena != submessage_arena) {
      date_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_created, submessage_arena);
    }
    
  } else {
    
  }
  date_created_ = date_created;
  // @@protoc_insertion_point(field_set_allocated:ghost.examples.protobuf.Todo.date_created)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace examples
}  // namespace ghost

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_persistency_5ftodo_5flist_2eproto
